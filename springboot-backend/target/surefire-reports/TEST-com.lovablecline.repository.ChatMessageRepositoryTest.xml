<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.lovablecline.repository.ChatMessageRepositoryTest" time="2.149" tests="16" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/khassangali/dev/flipApp/springboot-backend/target/test-classes:/Users/khassangali/dev/flipApp/springboot-backend/target/classes:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.3.0/spring-boot-starter-web-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter/3.3.0/spring-boot-starter-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.3.0/spring-boot-starter-logging-3.3.0.jar:/Users/khassangali/.m2/repository/ch/qos/logback/logback-classic/1.5.6/logback-classic-1.5.6.jar:/Users/khassangali/.m2/repository/ch/qos/logback/logback-core/1.5.6/logback-core-1.5.6.jar:/Users/khassangali/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.23.1/log4j-to-slf4j-2.23.1.jar:/Users/khassangali/.m2/repository/org/apache/logging/log4j/log4j-api/2.23.1/log4j-api-2.23.1.jar:/Users/khassangali/.m2/repository/org/slf4j/jul-to-slf4j/2.0.13/jul-to-slf4j-2.0.13.jar:/Users/khassangali/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/khassangali/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.3.0/spring-boot-starter-json-3.3.0.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.17.1/jackson-datatype-jdk8-2.17.1.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.17.1/jackson-module-parameter-names-2.17.1.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.3.0/spring-boot-starter-tomcat-3.3.0.jar:/Users/khassangali/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.24/tomcat-embed-core-10.1.24.jar:/Users/khassangali/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.24/tomcat-embed-websocket-10.1.24.jar:/Users/khassangali/.m2/repository/org/springframework/spring-web/6.1.8/spring-web-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-beans/6.1.8/spring-beans-6.1.8.jar:/Users/khassangali/.m2/repository/io/micrometer/micrometer-observation/1.13.0/micrometer-observation-1.13.0.jar:/Users/khassangali/.m2/repository/io/micrometer/micrometer-commons/1.13.0/micrometer-commons-1.13.0.jar:/Users/khassangali/.m2/repository/org/springframework/spring-webmvc/6.1.8/spring-webmvc-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-aop/6.1.8/spring-aop-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-context/6.1.8/spring-context-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-expression/6.1.8/spring-expression-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.3.0/spring-boot-starter-data-jpa-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.3.0/spring-boot-starter-aop-3.3.0.jar:/Users/khassangali/.m2/repository/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.3.0/spring-boot-starter-jdbc-3.3.0.jar:/Users/khassangali/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/Users/khassangali/.m2/repository/org/springframework/spring-jdbc/6.1.8/spring-jdbc-6.1.8.jar:/Users/khassangali/.m2/repository/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar:/Users/khassangali/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/khassangali/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/khassangali/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/khassangali/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/khassangali/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/Users/khassangali/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/khassangali/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/khassangali/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/khassangali/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/khassangali/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/khassangali/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/khassangali/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/khassangali/.m2/repository/org/springframework/data/spring-data-jpa/3.3.0/spring-data-jpa-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/data/spring-data-commons/3.3.0/spring-data-commons-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/spring-orm/6.1.8/spring-orm-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-tx/6.1.8/spring-tx-6.1.8.jar:/Users/khassangali/.m2/repository/org/slf4j/slf4j-api/2.0.13/slf4j-api-2.0.13.jar:/Users/khassangali/.m2/repository/org/springframework/spring-aspects/6.1.8/spring-aspects-6.1.8.jar:/Users/khassangali/.m2/repository/org/xerial/sqlite-jdbc/3.42.0.0/sqlite-jdbc-3.42.0.0.jar:/Users/khassangali/.m2/repository/org/hibernate/orm/hibernate-community-dialects/6.3.1.Final/hibernate-community-dialects-6.3.1.Final.jar:/Users/khassangali/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/khassangali/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/khassangali/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/khassangali/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.17.1/jackson-databind-2.17.1.jar:/Users/khassangali/.m2/repository/org/springframework/security/spring-security-crypto/6.3.0/spring-security-crypto-6.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.3.0/spring-boot-starter-validation-3.3.0.jar:/Users/khassangali/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.24/tomcat-embed-el-10.1.24.jar:/Users/khassangali/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/khassangali/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/khassangali/.m2/repository/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.17.1/jackson-datatype-jsr310-2.17.1.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.17.1/jackson-annotations-2.17.1.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.17.1/jackson-core-2.17.1.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-devtools/3.3.0/spring-boot-devtools-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot/3.3.0/spring-boot-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.3.0/spring-boot-autoconfigure-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.3.0/spring-boot-starter-test-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-test/3.3.0/spring-boot-test-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.3.0/spring-boot-test-autoconfigure-3.3.0.jar:/Users/khassangali/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/khassangali/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/khassangali/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/khassangali/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/Users/khassangali/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/Users/khassangali/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/Users/khassangali/.m2/repository/org/assertj/assertj-core/3.25.3/assertj-core-3.25.3.jar:/Users/khassangali/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/Users/khassangali/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/Users/khassangali/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/khassangali/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/Users/khassangali/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.2/junit-jupiter-params-5.10.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.2/junit-jupiter-engine-5.10.2.jar:/Users/khassangali/.m2/repository/org/junit/platform/junit-platform-engine/1.10.2/junit-platform-engine-1.10.2.jar:/Users/khassangali/.m2/repository/org/mockito/mockito-junit-jupiter/5.11.0/mockito-junit-jupiter-5.11.0.jar:/Users/khassangali/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/khassangali/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/khassangali/.m2/repository/org/springframework/spring-core/6.1.8/spring-core-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-jcl/6.1.8/spring-jcl-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-test/6.1.8/spring-test-6.1.8.jar:/Users/khassangali/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/khassangali/.m2/repository/org/mockito/mockito-core/5.12.0/mockito-core-5.12.0.jar:/Users/khassangali/.m2/repository/net/bytebuddy/byte-buddy/1.14.16/byte-buddy-1.14.16.jar:/Users/khassangali/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.16/byte-buddy-agent-1.14.16.jar:/Users/khassangali/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/khassangali/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/Los_Angeles"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/Users/khassangali/Library/Java/JavaVirtualMachines/corretto-17.0.12/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/khassangali/dev/flipApp/springboot-backend/target/surefire/surefirebooter-20250825010420875_3.jar /Users/khassangali/dev/flipApp/springboot-backend/target/surefire 2025-08-25T01-04-20_834-jvmRun1 surefire-20250825010420875_1tmp surefire_0-20250825010420875_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/khassangali/dev/flipApp/springboot-backend/target/test-classes:/Users/khassangali/dev/flipApp/springboot-backend/target/classes:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.3.0/spring-boot-starter-web-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter/3.3.0/spring-boot-starter-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.3.0/spring-boot-starter-logging-3.3.0.jar:/Users/khassangali/.m2/repository/ch/qos/logback/logback-classic/1.5.6/logback-classic-1.5.6.jar:/Users/khassangali/.m2/repository/ch/qos/logback/logback-core/1.5.6/logback-core-1.5.6.jar:/Users/khassangali/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.23.1/log4j-to-slf4j-2.23.1.jar:/Users/khassangali/.m2/repository/org/apache/logging/log4j/log4j-api/2.23.1/log4j-api-2.23.1.jar:/Users/khassangali/.m2/repository/org/slf4j/jul-to-slf4j/2.0.13/jul-to-slf4j-2.0.13.jar:/Users/khassangali/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/khassangali/.m2/repository/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.3.0/spring-boot-starter-json-3.3.0.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.17.1/jackson-datatype-jdk8-2.17.1.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.17.1/jackson-module-parameter-names-2.17.1.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.3.0/spring-boot-starter-tomcat-3.3.0.jar:/Users/khassangali/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.24/tomcat-embed-core-10.1.24.jar:/Users/khassangali/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.24/tomcat-embed-websocket-10.1.24.jar:/Users/khassangali/.m2/repository/org/springframework/spring-web/6.1.8/spring-web-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-beans/6.1.8/spring-beans-6.1.8.jar:/Users/khassangali/.m2/repository/io/micrometer/micrometer-observation/1.13.0/micrometer-observation-1.13.0.jar:/Users/khassangali/.m2/repository/io/micrometer/micrometer-commons/1.13.0/micrometer-commons-1.13.0.jar:/Users/khassangali/.m2/repository/org/springframework/spring-webmvc/6.1.8/spring-webmvc-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-aop/6.1.8/spring-aop-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-context/6.1.8/spring-context-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-expression/6.1.8/spring-expression-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.3.0/spring-boot-starter-data-jpa-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.3.0/spring-boot-starter-aop-3.3.0.jar:/Users/khassangali/.m2/repository/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.3.0/spring-boot-starter-jdbc-3.3.0.jar:/Users/khassangali/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/Users/khassangali/.m2/repository/org/springframework/spring-jdbc/6.1.8/spring-jdbc-6.1.8.jar:/Users/khassangali/.m2/repository/org/hibernate/orm/hibernate-core/6.5.2.Final/hibernate-core-6.5.2.Final.jar:/Users/khassangali/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/khassangali/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/khassangali/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/Users/khassangali/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/Users/khassangali/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/Users/khassangali/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/khassangali/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/khassangali/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/khassangali/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/khassangali/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/khassangali/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/khassangali/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/khassangali/.m2/repository/org/springframework/data/spring-data-jpa/3.3.0/spring-data-jpa-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/data/spring-data-commons/3.3.0/spring-data-commons-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/spring-orm/6.1.8/spring-orm-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-tx/6.1.8/spring-tx-6.1.8.jar:/Users/khassangali/.m2/repository/org/slf4j/slf4j-api/2.0.13/slf4j-api-2.0.13.jar:/Users/khassangali/.m2/repository/org/springframework/spring-aspects/6.1.8/spring-aspects-6.1.8.jar:/Users/khassangali/.m2/repository/org/xerial/sqlite-jdbc/3.42.0.0/sqlite-jdbc-3.42.0.0.jar:/Users/khassangali/.m2/repository/org/hibernate/orm/hibernate-community-dialects/6.3.1.Final/hibernate-community-dialects-6.3.1.Final.jar:/Users/khassangali/.m2/repository/org/jboss/logging/jboss-logging/3.5.3.Final/jboss-logging-3.5.3.Final.jar:/Users/khassangali/.m2/repository/io/jsonwebtoken/jjwt-api/0.11.5/jjwt-api-0.11.5.jar:/Users/khassangali/.m2/repository/io/jsonwebtoken/jjwt-impl/0.11.5/jjwt-impl-0.11.5.jar:/Users/khassangali/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.11.5/jjwt-jackson-0.11.5.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.17.1/jackson-databind-2.17.1.jar:/Users/khassangali/.m2/repository/org/springframework/security/spring-security-crypto/6.3.0/spring-security-crypto-6.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.3.0/spring-boot-starter-validation-3.3.0.jar:/Users/khassangali/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.24/tomcat-embed-el-10.1.24.jar:/Users/khassangali/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar:/Users/khassangali/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/khassangali/.m2/repository/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.17.1/jackson-datatype-jsr310-2.17.1.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.17.1/jackson-annotations-2.17.1.jar:/Users/khassangali/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.17.1/jackson-core-2.17.1.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-devtools/3.3.0/spring-boot-devtools-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot/3.3.0/spring-boot-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.3.0/spring-boot-autoconfigure-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.3.0/spring-boot-starter-test-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-test/3.3.0/spring-boot-test-3.3.0.jar:/Users/khassangali/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.3.0/spring-boot-test-autoconfigure-3.3.0.jar:/Users/khassangali/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/khassangali/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/khassangali/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/khassangali/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/Users/khassangali/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/Users/khassangali/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/Users/khassangali/.m2/repository/org/assertj/assertj-core/3.25.3/assertj-core-3.25.3.jar:/Users/khassangali/.m2/repository/org/awaitility/awaitility/4.2.1/awaitility-4.2.1.jar:/Users/khassangali/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/Users/khassangali/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/khassangali/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/Users/khassangali/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.2/junit-jupiter-params-5.10.2.jar:/Users/khassangali/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.2/junit-jupiter-engine-5.10.2.jar:/Users/khassangali/.m2/repository/org/junit/platform/junit-platform-engine/1.10.2/junit-platform-engine-1.10.2.jar:/Users/khassangali/.m2/repository/org/mockito/mockito-junit-jupiter/5.11.0/mockito-junit-jupiter-5.11.0.jar:/Users/khassangali/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/khassangali/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/khassangali/.m2/repository/org/springframework/spring-core/6.1.8/spring-core-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-jcl/6.1.8/spring-jcl-6.1.8.jar:/Users/khassangali/.m2/repository/org/springframework/spring-test/6.1.8/spring-test-6.1.8.jar:/Users/khassangali/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/Users/khassangali/.m2/repository/org/mockito/mockito-core/5.12.0/mockito-core-5.12.0.jar:/Users/khassangali/.m2/repository/net/bytebuddy/byte-buddy/1.14.16/byte-buddy-1.14.16.jar:/Users/khassangali/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.16/byte-buddy-agent-1.14.16.jar:/Users/khassangali/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/khassangali/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/khassangali"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-07-16"/>
    <property name="java.home" value="/Users/khassangali/Library/Java/JavaVirtualMachines/corretto-17.0.12/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/khassangali/dev/flipApp/springboot-backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/Users/khassangali/dev/flipApp/springboot-backend/target/surefire/surefirebooter-20250825010420875_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="17.0.12+7-LTS"/>
    <property name="user.name" value="khassangali"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="14.4"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.12.7.1"/>
    <property name="localRepository" value="/Users/khassangali/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/_c/5yy5nk050q7dp4vs_6tl6dhc0000gn/T/"/>
    <property name="java.version" value="17.0.12"/>
    <property name="user.dir" value="/Users/khassangali/dev/flipApp/springboot-backend"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="33247"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/khassangali/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.12+7-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="findAll_shouldReturnAllChatMessages" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.319">
    <system-out><![CDATA[01:04:21.287 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.lovablecline.repository.ChatMessageRepositoryTest]: ChatMessageRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
01:04:21.337 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.lovablecline.LovableClineApplication for test class com.lovablecline.repository.ChatMessageRepositoryTest
01:04:21.406 [main] INFO org.springframework.boot.devtools.restart.RestartApplicationListener -- Restart disabled due to context in which it is running
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.0)

2025-08-25T01:04:21.611-07:00  INFO 33247 --- [           main] c.l.r.ChatMessageRepositoryTest          : Starting ChatMessageRepositoryTest using Java 17.0.12 with PID 33247 (started by khassangali in /Users/khassangali/dev/flipApp/springboot-backend)
2025-08-25T01:04:21.611-07:00 DEBUG 33247 --- [           main] c.l.r.ChatMessageRepositoryTest          : Running with Spring Boot v3.3.0, Spring v6.1.8
2025-08-25T01:04:21.611-07:00  INFO 33247 --- [           main] c.l.r.ChatMessageRepositoryTest          : The following 1 profile is active: "test"
2025-08-25T01:04:21.782-07:00  INFO 33247 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-25T01:04:21.804-07:00  INFO 33247 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19 ms. Found 5 JPA repository interfaces.
2025-08-25T01:04:21.824-07:00  INFO 33247 --- [           main] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2025-08-25T01:04:21.879-07:00  INFO 33247 --- [           main] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:08e743be-cc39-4440-a420-426fd9f29396;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2025-08-25T01:04:21.984-07:00  INFO 33247 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-25T01:04:22.020-07:00  INFO 33247 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2025-08-25T01:04:22.032-07:00  INFO 33247 --- [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-08-25T01:04:22.144-07:00  INFO 33247 --- [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-25T01:04:22.163-07:00  WARN 33247 --- [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-25T01:04:22.541-07:00  INFO 33247 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-25T01:04:22.547-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    drop table if exists chat_messages cascade 
Hibernate: 
    drop table if exists chat_messages cascade 
2025-08-25T01:04:22.548-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    drop table if exists gallery_items cascade 
Hibernate: 
    drop table if exists gallery_items cascade 
2025-08-25T01:04:22.548-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    drop table if exists project_updates cascade 
Hibernate: 
    drop table if exists project_updates cascade 
2025-08-25T01:04:22.549-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    drop table if exists projects cascade 
Hibernate: 
    drop table if exists projects cascade 
2025-08-25T01:04:22.549-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
2025-08-25T01:04:22.551-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    create table chat_messages (
        is_from_client boolean,
        created_at timestamp(6),
        id varchar(255) not null,
        project_id varchar(255),
        user_id varchar(255),
        message clob not null,
        primary key (id)
    )
Hibernate: 
    create table chat_messages (
        is_from_client boolean,
        created_at timestamp(6),
        id varchar(255) not null,
        project_id varchar(255),
        user_id varchar(255),
        message clob not null,
        primary key (id)
    )
2025-08-25T01:04:22.553-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    create table gallery_items (
        created_at timestamp(6),
        room varchar(50),
        stage varchar(50),
        title varchar(100) not null,
        description varchar(500),
        id varchar(255) not null,
        image_url varchar(255),
        project_id varchar(255),
        primary key (id)
    )
Hibernate: 
    create table gallery_items (
        created_at timestamp(6),
        room varchar(50),
        stage varchar(50),
        title varchar(100) not null,
        description varchar(500),
        id varchar(255) not null,
        image_url varchar(255),
        project_id varchar(255),
        primary key (id)
    )
2025-08-25T01:04:22.554-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    create table project_updates (
        created_at timestamp(6),
        date timestamp(6),
        title varchar(200) not null,
        id varchar(255) not null,
        project_id varchar(255),
        description clob,
        primary key (id)
    )
Hibernate: 
    create table project_updates (
        created_at timestamp(6),
        date timestamp(6),
        title varchar(200) not null,
        id varchar(255) not null,
        project_id varchar(255),
        description clob,
        primary key (id)
    )
2025-08-25T01:04:22.554-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    create table projects (
        created_at timestamp(6),
        estimated_end_date timestamp(6),
        start_date timestamp(6),
        projected_profit_status varchar(50),
        status varchar(50),
        name varchar(100) not null,
        address varchar(200),
        id varchar(255) not null,
        owner_id varchar(255),
        primary key (id)
    )
Hibernate: 
    create table projects (
        created_at timestamp(6),
        estimated_end_date timestamp(6),
        start_date timestamp(6),
        projected_profit_status varchar(50),
        status varchar(50),
        name varchar(100) not null,
        address varchar(200),
        id varchar(255) not null,
        owner_id varchar(255),
        primary key (id)
    )
2025-08-25T01:04:22.555-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    create table users (
        is_active boolean,
        is_anonymous boolean,
        created_at timestamp(6),
        username varchar(50) not null unique,
        email varchar(100) not null unique,
        password varchar(120) not null,
        id varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table users (
        is_active boolean,
        is_anonymous boolean,
        created_at timestamp(6),
        username varchar(50) not null unique,
        email varchar(100) not null unique,
        password varchar(120) not null,
        id varchar(255) not null,
        primary key (id)
    )
2025-08-25T01:04:22.556-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    alter table if exists chat_messages 
       add constraint FKp9abl798sxk8na4uw32wnue8h 
       foreign key (project_id) 
       references projects
Hibernate: 
    alter table if exists chat_messages 
       add constraint FKp9abl798sxk8na4uw32wnue8h 
       foreign key (project_id) 
       references projects
2025-08-25T01:04:22.560-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    alter table if exists chat_messages 
       add constraint FK6f0y4l43ihmgfswkgy9yrtjkh 
       foreign key (user_id) 
       references users
Hibernate: 
    alter table if exists chat_messages 
       add constraint FK6f0y4l43ihmgfswkgy9yrtjkh 
       foreign key (user_id) 
       references users
2025-08-25T01:04:22.561-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    alter table if exists gallery_items 
       add constraint FKbr7qli931qdpc46fw9pkxhor 
       foreign key (project_id) 
       references projects
Hibernate: 
    alter table if exists gallery_items 
       add constraint FKbr7qli931qdpc46fw9pkxhor 
       foreign key (project_id) 
       references projects
2025-08-25T01:04:22.561-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    alter table if exists project_updates 
       add constraint FK53exxplm5otnq44nl7053y7b5 
       foreign key (project_id) 
       references projects
Hibernate: 
    alter table if exists project_updates 
       add constraint FK53exxplm5otnq44nl7053y7b5 
       foreign key (project_id) 
       references projects
2025-08-25T01:04:22.563-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    alter table if exists projects 
       add constraint FKmueqy6cpcwpfl8gnnag4idjt9 
       foreign key (owner_id) 
       references users
Hibernate: 
    alter table if exists projects 
       add constraint FKmueqy6cpcwpfl8gnnag4idjt9 
       foreign key (owner_id) 
       references users
2025-08-25T01:04:22.564-07:00  INFO 33247 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-25T01:04:22.690-07:00  INFO 33247 --- [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-25T01:04:22.912-07:00  INFO 33247 --- [           main] c.l.r.ChatMessageRepositoryTest          : Started ChatMessageRepositoryTest in 1.548 seconds (process running for 2.002)
2025-08-25T01:04:23.167-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.174-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.175-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.176-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.176-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.206-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0
]]></system-out>
  </testcase>
  <testcase name="findByProject_shouldReturnMessagesForProject" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.013">
    <system-out><![CDATA[2025-08-25T01:04:23.237-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.238-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.238-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.238-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.239-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.246-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=?
]]></system-out>
  </testcase>
  <testcase name="countByProjectIdAndIsFromClient_shouldReturnContractorMessageCount" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.01">
    <system-out><![CDATA[2025-08-25T01:04:23.250-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.251-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.251-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.252-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.252-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.256-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        count(cm1_0.id) 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=?
Hibernate: 
    select
        count(cm1_0.id) 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=?
]]></system-out>
  </testcase>
  <testcase name="save_shouldPersistNewChatMessage" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.009">
    <system-out><![CDATA[2025-08-25T01:04:23.261-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.262-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.262-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.262-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.262-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.263-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.267-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        count(*) 
    from
        chat_messages cm1_0
Hibernate: 
    select
        count(*) 
    from
        chat_messages cm1_0
]]></system-out>
  </testcase>
  <testcase name="findByUserIdAndProjectId_shouldReturnMessagesForUserAndProject" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.006">
    <system-out><![CDATA[2025-08-25T01:04:23.270-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.271-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.271-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.272-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.272-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.273-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.user_id=? 
        and cm1_0.project_id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.user_id=? 
        and cm1_0.project_id=?
]]></system-out>
  </testcase>
  <testcase name="findById_shouldReturnEmptyWhenNotFound" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.01">
    <system-out><![CDATA[2025-08-25T01:04:23.277-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.278-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.279-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.279-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.279-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.283-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="findById_shouldReturnMessageWhenExists" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.005">
    <system-out><![CDATA[2025-08-25T01:04:23.287-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.288-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.288-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.288-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.289-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
]]></system-out>
  </testcase>
  <testcase name="findByIdAndProjectId_shouldReturnMessageWhenExists" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.006">
    <system-out><![CDATA[2025-08-25T01:04:23.293-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.294-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.294-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.294-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.295-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.296-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=? 
        and cm1_0.project_id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=? 
        and cm1_0.project_id=?
]]></system-out>
  </testcase>
  <testcase name="findByProjectIdAndIsFromClientOrderByCreatedAtDesc_shouldReturnContractorMessagesOrdered" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.006">
    <system-out><![CDATA[2025-08-25T01:04:23.300-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.300-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.301-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.301-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.301-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.303-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=? 
    order by
        cm1_0.created_at desc
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=? 
    order by
        cm1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="findAllByUserId_shouldReturnAllMessagesForUser" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.006">
    <system-out><![CDATA[2025-08-25T01:04:23.306-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.307-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.307-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.307-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.307-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.308-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.308-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.309-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.user_id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.user_id=?
]]></system-out>
  </testcase>
  <testcase name="findByProjectIdAndIsFromClientOrderByCreatedAtDesc_shouldReturnClientMessagesOrdered" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.007">
    <system-out><![CDATA[2025-08-25T01:04:23.313-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.313-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.313-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.314-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.314-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.315-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=? 
    order by
        cm1_0.created_at desc
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=? 
    order by
        cm1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="countByProjectIdAndIsFromClient_shouldReturnClientMessageCount" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.005">
    <system-out><![CDATA[2025-08-25T01:04:23.320-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.320-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.321-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.321-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.321-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.322-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        count(cm1_0.id) 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=?
Hibernate: 
    select
        count(cm1_0.id) 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
        and cm1_0.is_from_client=?
]]></system-out>
  </testcase>
  <testcase name="delete_shouldRemoveChatMessage" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.009">
    <system-out><![CDATA[2025-08-25T01:04:23.325-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.325-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.326-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.326-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.326-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.328-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    delete 
    from
        chat_messages 
    where
        id=?
Hibernate: 
    delete 
    from
        chat_messages 
    where
        id=?
2025-08-25T01:04:23.330-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        count(*) 
    from
        chat_messages cm1_0
Hibernate: 
    select
        count(*) 
    from
        chat_messages cm1_0
2025-08-25T01:04:23.331-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="findByProjectId_shouldReturnMessagesForProjectId" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.006">
    <system-out><![CDATA[2025-08-25T01:04:23.334-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.334-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.334-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.335-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.335-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.337-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=?
]]></system-out>
  </testcase>
  <testcase name="findByProjectIdOrderByCreatedAtDesc_shouldReturnMessagesOrderedByCreatedAtDesc" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.006">
    <system-out><![CDATA[2025-08-25T01:04:23.340-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.340-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.341-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.341-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.341-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.342-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
    order by
        cm1_0.created_at desc
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.project_id=? 
    order by
        cm1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="findByIdAndProjectId_shouldReturnEmptyWhenIdDoesNotMatchProject" classname="com.lovablecline.repository.ChatMessageRepositoryTest" time="0.005">
    <system-out><![CDATA[2025-08-25T01:04:23.346-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (created_at, email, is_active, is_anonymous, password, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.347-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.347-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.348-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.348-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        chat_messages
        (created_at, is_from_client, message, project_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.349-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        projects
        (address, created_at, estimated_end_date, name, owner_id, projected_profit_status, start_date, status, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-25T01:04:23.349-07:00 DEBUG 33247 --- [           main] org.hibernate.SQL                        : 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=? 
        and cm1_0.project_id=?
Hibernate: 
    select
        cm1_0.id,
        cm1_0.created_at,
        cm1_0.is_from_client,
        cm1_0.message,
        cm1_0.project_id,
        cm1_0.user_id 
    from
        chat_messages cm1_0 
    where
        cm1_0.id=? 
        and cm1_0.project_id=?
]]></system-out>
  </testcase>
</testsuite>